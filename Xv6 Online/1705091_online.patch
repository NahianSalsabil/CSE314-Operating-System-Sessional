diff --git a/Makefile b/Makefile
index 09d790c..575e74d 100644
--- a/Makefile
+++ b/Makefile
@@ -51,7 +51,7 @@ TOOLPREFIX := $(shell if i386-jos-elf-objdump -i 2>&1 | grep '^elf32-i386$$' >/d
 endif
 
 # If the makefile can't find QEMU, specify its path here
-# QEMU = qemu-system-i386
+QEMU = qemu-system-x86_64
 
 # Try to infer the correct QEMU
 ifndef QEMU
@@ -181,6 +181,13 @@ UPROGS=\
 	_usertests\
 	_wc\
 	_zombie\
+	_cpcp\
+	_shutdown\
+	_add\
+	_incr\
+	_substr\
+	_substroccur\
+	_testb2\
 
 fs.img: mkfs README $(UPROGS)
 	./mkfs fs.img README $(UPROGS)
@@ -248,7 +255,7 @@ qemu-nox-gdb: fs.img xv6.img .gdbinit
 # check in that version.
 
 EXTRA=\
-	mkfs.c ulib.c user.h cat.c echo.c forktest.c grep.c kill.c\
+	mkfs.c ulib.c user.h cat.c echo.c forktest.c grep.c kill.c cpcp.c shutdown.c add.c incr.c substr.c _substroccur.c testb2.c\
 	ln.c ls.c mkdir.c rm.c stressfs.c usertests.c wc.c zombie.c\
 	printf.c umalloc.c\
 	README dot-bochsrc *.pl toc.* runoff runoff1 runoff.list\
diff --git a/Makefile.bak b/Makefile.bak
new file mode 100644
index 0000000..09d790c
--- /dev/null
+++ b/Makefile.bak
@@ -0,0 +1,286 @@
+OBJS = \
+	bio.o\
+	console.o\
+	exec.o\
+	file.o\
+	fs.o\
+	ide.o\
+	ioapic.o\
+	kalloc.o\
+	kbd.o\
+	lapic.o\
+	log.o\
+	main.o\
+	mp.o\
+	picirq.o\
+	pipe.o\
+	proc.o\
+	sleeplock.o\
+	spinlock.o\
+	string.o\
+	swtch.o\
+	syscall.o\
+	sysfile.o\
+	sysproc.o\
+	trapasm.o\
+	trap.o\
+	uart.o\
+	vectors.o\
+	vm.o\
+
+# Cross-compiling (e.g., on Mac OS X)
+# TOOLPREFIX = i386-jos-elf
+
+# Using native tools (e.g., on X86 Linux)
+#TOOLPREFIX = 
+
+# Try to infer the correct TOOLPREFIX if not set
+ifndef TOOLPREFIX
+TOOLPREFIX := $(shell if i386-jos-elf-objdump -i 2>&1 | grep '^elf32-i386$$' >/dev/null 2>&1; \
+	then echo 'i386-jos-elf-'; \
+	elif objdump -i 2>&1 | grep 'elf32-i386' >/dev/null 2>&1; \
+	then echo ''; \
+	else echo "***" 1>&2; \
+	echo "*** Error: Couldn't find an i386-*-elf version of GCC/binutils." 1>&2; \
+	echo "*** Is the directory with i386-jos-elf-gcc in your PATH?" 1>&2; \
+	echo "*** If your i386-*-elf toolchain is installed with a command" 1>&2; \
+	echo "*** prefix other than 'i386-jos-elf-', set your TOOLPREFIX" 1>&2; \
+	echo "*** environment variable to that prefix and run 'make' again." 1>&2; \
+	echo "*** To turn off this error, run 'gmake TOOLPREFIX= ...'." 1>&2; \
+	echo "***" 1>&2; exit 1; fi)
+endif
+
+# If the makefile can't find QEMU, specify its path here
+# QEMU = qemu-system-i386
+
+# Try to infer the correct QEMU
+ifndef QEMU
+QEMU = $(shell if which qemu > /dev/null; \
+	then echo qemu; exit; \
+	elif which qemu-system-i386 > /dev/null; \
+	then echo qemu-system-i386; exit; \
+	elif which qemu-system-x86_64 > /dev/null; \
+	then echo qemu-system-x86_64; exit; \
+	else \
+	qemu=/Applications/Q.app/Contents/MacOS/i386-softmmu.app/Contents/MacOS/i386-softmmu; \
+	if test -x $$qemu; then echo $$qemu; exit; fi; fi; \
+	echo "***" 1>&2; \
+	echo "*** Error: Couldn't find a working QEMU executable." 1>&2; \
+	echo "*** Is the directory containing the qemu binary in your PATH" 1>&2; \
+	echo "*** or have you tried setting the QEMU variable in Makefile?" 1>&2; \
+	echo "***" 1>&2; exit 1)
+endif
+
+CC = $(TOOLPREFIX)gcc
+AS = $(TOOLPREFIX)gas
+LD = $(TOOLPREFIX)ld
+OBJCOPY = $(TOOLPREFIX)objcopy
+OBJDUMP = $(TOOLPREFIX)objdump
+CFLAGS = -fno-pic -static -fno-builtin -fno-strict-aliasing -O2 -Wall -MD -ggdb -m32 -Werror -fno-omit-frame-pointer
+CFLAGS += $(shell $(CC) -fno-stack-protector -E -x c /dev/null >/dev/null 2>&1 && echo -fno-stack-protector)
+ASFLAGS = -m32 -gdwarf-2 -Wa,-divide
+# FreeBSD ld wants ``elf_i386_fbsd''
+LDFLAGS += -m $(shell $(LD) -V | grep elf_i386 2>/dev/null | head -n 1)
+
+# Disable PIE when possible (for Ubuntu 16.10 toolchain)
+ifneq ($(shell $(CC) -dumpspecs 2>/dev/null | grep -e '[^f]no-pie'),)
+CFLAGS += -fno-pie -no-pie
+endif
+ifneq ($(shell $(CC) -dumpspecs 2>/dev/null | grep -e '[^f]nopie'),)
+CFLAGS += -fno-pie -nopie
+endif
+
+xv6.img: bootblock kernel
+	dd if=/dev/zero of=xv6.img count=10000
+	dd if=bootblock of=xv6.img conv=notrunc
+	dd if=kernel of=xv6.img seek=1 conv=notrunc
+
+xv6memfs.img: bootblock kernelmemfs
+	dd if=/dev/zero of=xv6memfs.img count=10000
+	dd if=bootblock of=xv6memfs.img conv=notrunc
+	dd if=kernelmemfs of=xv6memfs.img seek=1 conv=notrunc
+
+bootblock: bootasm.S bootmain.c
+	$(CC) $(CFLAGS) -fno-pic -O -nostdinc -I. -c bootmain.c
+	$(CC) $(CFLAGS) -fno-pic -nostdinc -I. -c bootasm.S
+	$(LD) $(LDFLAGS) -N -e start -Ttext 0x7C00 -o bootblock.o bootasm.o bootmain.o
+	$(OBJDUMP) -S bootblock.o > bootblock.asm
+	$(OBJCOPY) -S -O binary -j .text bootblock.o bootblock
+	./sign.pl bootblock
+
+entryother: entryother.S
+	$(CC) $(CFLAGS) -fno-pic -nostdinc -I. -c entryother.S
+	$(LD) $(LDFLAGS) -N -e start -Ttext 0x7000 -o bootblockother.o entryother.o
+	$(OBJCOPY) -S -O binary -j .text bootblockother.o entryother
+	$(OBJDUMP) -S bootblockother.o > entryother.asm
+
+initcode: initcode.S
+	$(CC) $(CFLAGS) -nostdinc -I. -c initcode.S
+	$(LD) $(LDFLAGS) -N -e start -Ttext 0 -o initcode.out initcode.o
+	$(OBJCOPY) -S -O binary initcode.out initcode
+	$(OBJDUMP) -S initcode.o > initcode.asm
+
+kernel: $(OBJS) entry.o entryother initcode kernel.ld
+	$(LD) $(LDFLAGS) -T kernel.ld -o kernel entry.o $(OBJS) -b binary initcode entryother
+	$(OBJDUMP) -S kernel > kernel.asm
+	$(OBJDUMP) -t kernel | sed '1,/SYMBOL TABLE/d; s/ .* / /; /^$$/d' > kernel.sym
+
+# kernelmemfs is a copy of kernel that maintains the
+# disk image in memory instead of writing to a disk.
+# This is not so useful for testing persistent storage or
+# exploring disk buffering implementations, but it is
+# great for testing the kernel on real hardware without
+# needing a scratch disk.
+MEMFSOBJS = $(filter-out ide.o,$(OBJS)) memide.o
+kernelmemfs: $(MEMFSOBJS) entry.o entryother initcode kernel.ld fs.img
+	$(LD) $(LDFLAGS) -T kernel.ld -o kernelmemfs entry.o  $(MEMFSOBJS) -b binary initcode entryother fs.img
+	$(OBJDUMP) -S kernelmemfs > kernelmemfs.asm
+	$(OBJDUMP) -t kernelmemfs | sed '1,/SYMBOL TABLE/d; s/ .* / /; /^$$/d' > kernelmemfs.sym
+
+tags: $(OBJS) entryother.S _init
+	etags *.S *.c
+
+vectors.S: vectors.pl
+	./vectors.pl > vectors.S
+
+ULIB = ulib.o usys.o printf.o umalloc.o
+
+_%: %.o $(ULIB)
+	$(LD) $(LDFLAGS) -N -e main -Ttext 0 -o $@ $^
+	$(OBJDUMP) -S $@ > $*.asm
+	$(OBJDUMP) -t $@ | sed '1,/SYMBOL TABLE/d; s/ .* / /; /^$$/d' > $*.sym
+
+_forktest: forktest.o $(ULIB)
+	# forktest has less library code linked in - needs to be small
+	# in order to be able to max out the proc table.
+	$(LD) $(LDFLAGS) -N -e main -Ttext 0 -o _forktest forktest.o ulib.o usys.o
+	$(OBJDUMP) -S _forktest > forktest.asm
+
+mkfs: mkfs.c fs.h
+	gcc -Werror -Wall -o mkfs mkfs.c
+
+# Prevent deletion of intermediate files, e.g. cat.o, after first build, so
+# that disk image changes after first build are persistent until clean.  More
+# details:
+# http://www.gnu.org/software/make/manual/html_node/Chained-Rules.html
+.PRECIOUS: %.o
+
+UPROGS=\
+	_cat\
+	_echo\
+	_forktest\
+	_grep\
+	_init\
+	_kill\
+	_ln\
+	_ls\
+	_mkdir\
+	_rm\
+	_sh\
+	_stressfs\
+	_usertests\
+	_wc\
+	_zombie\
+
+fs.img: mkfs README $(UPROGS)
+	./mkfs fs.img README $(UPROGS)
+
+-include *.d
+
+clean: 
+	rm -f *.tex *.dvi *.idx *.aux *.log *.ind *.ilg \
+	*.o *.d *.asm *.sym vectors.S bootblock entryother \
+	initcode initcode.out kernel xv6.img fs.img kernelmemfs \
+	xv6memfs.img mkfs .gdbinit \
+	$(UPROGS)
+
+# make a printout
+FILES = $(shell grep -v '^\#' runoff.list)
+PRINT = runoff.list runoff.spec README toc.hdr toc.ftr $(FILES)
+
+xv6.pdf: $(PRINT)
+	./runoff
+	ls -l xv6.pdf
+
+print: xv6.pdf
+
+# run in emulators
+
+bochs : fs.img xv6.img
+	if [ ! -e .bochsrc ]; then ln -s dot-bochsrc .bochsrc; fi
+	bochs -q
+
+# try to generate a unique GDB port
+GDBPORT = $(shell expr `id -u` % 5000 + 25000)
+# QEMU's gdb stub command line changed in 0.11
+QEMUGDB = $(shell if $(QEMU) -help | grep -q '^-gdb'; \
+	then echo "-gdb tcp::$(GDBPORT)"; \
+	else echo "-s -p $(GDBPORT)"; fi)
+ifndef CPUS
+CPUS := 2
+endif
+QEMUOPTS = -drive file=fs.img,index=1,media=disk,format=raw -drive file=xv6.img,index=0,media=disk,format=raw -smp $(CPUS) -m 512 $(QEMUEXTRA)
+
+qemu: fs.img xv6.img
+	$(QEMU) -serial mon:stdio $(QEMUOPTS)
+
+qemu-memfs: xv6memfs.img
+	$(QEMU) -drive file=xv6memfs.img,index=0,media=disk,format=raw -smp $(CPUS) -m 256
+
+qemu-nox: fs.img xv6.img
+	$(QEMU) -nographic $(QEMUOPTS)
+
+.gdbinit: .gdbinit.tmpl
+	sed "s/localhost:1234/localhost:$(GDBPORT)/" < $^ > $@
+
+qemu-gdb: fs.img xv6.img .gdbinit
+	@echo "*** Now run 'gdb'." 1>&2
+	$(QEMU) -serial mon:stdio $(QEMUOPTS) -S $(QEMUGDB)
+
+qemu-nox-gdb: fs.img xv6.img .gdbinit
+	@echo "*** Now run 'gdb'." 1>&2
+	$(QEMU) -nographic $(QEMUOPTS) -S $(QEMUGDB)
+
+# CUT HERE
+# prepare dist for students
+# after running make dist, probably want to
+# rename it to rev0 or rev1 or so on and then
+# check in that version.
+
+EXTRA=\
+	mkfs.c ulib.c user.h cat.c echo.c forktest.c grep.c kill.c\
+	ln.c ls.c mkdir.c rm.c stressfs.c usertests.c wc.c zombie.c\
+	printf.c umalloc.c\
+	README dot-bochsrc *.pl toc.* runoff runoff1 runoff.list\
+	.gdbinit.tmpl gdbutil\
+
+dist:
+	rm -rf dist
+	mkdir dist
+	for i in $(FILES); \
+	do \
+		grep -v PAGEBREAK $$i >dist/$$i; \
+	done
+	sed '/CUT HERE/,$$d' Makefile >dist/Makefile
+	echo >dist/runoff.spec
+	cp $(EXTRA) dist
+
+dist-test:
+	rm -rf dist
+	make dist
+	rm -rf dist-test
+	mkdir dist-test
+	cp dist/* dist-test
+	cd dist-test; $(MAKE) print
+	cd dist-test; $(MAKE) bochs || true
+	cd dist-test; $(MAKE) qemu
+
+# update this rule (change rev#) when it is time to
+# make a new revision.
+tar:
+	rm -rf /tmp/xv6
+	mkdir -p /tmp/xv6
+	cp dist/* dist/.gdbinit.tmpl /tmp/xv6
+	(cd /tmp; tar cf - xv6) | gzip >xv6-rev10.tar.gz  # the next one will be 10 (9/17)
+
+.PHONY: dist-test dist
diff --git a/add.c b/add.c
new file mode 100644
index 0000000..69510b7
--- /dev/null
+++ b/add.c
@@ -0,0 +1,15 @@
+#include "types.h"
+#include "stat.h"
+#include "user.h"
+
+int main(int argc, char *argv[]){
+    //struct mystat *ct = malloc(sizeof(struct mystat));
+    //ct->sz = argc-1;
+    int size = argc - 1;
+    int *nums = malloc(size* sizeof(int));
+    for(int i = 0; i < size; i++){
+        nums[i] = atoi(argv[i+1]);
+    }
+    printf(1, "%d\n", add(nums, size));
+    exit();
+}
\ No newline at end of file
diff --git a/cpcp.c b/cpcp.c
new file mode 100644
index 0000000..0bd95e8
--- /dev/null
+++ b/cpcp.c
@@ -0,0 +1,8 @@
+#include "types.h"
+#include "stat.h"
+#include "user.h"
+
+int main(){
+    printf(1, "baal\n");
+    exit();
+}
\ No newline at end of file
diff --git a/incr.c b/incr.c
new file mode 100644
index 0000000..ac31cd0
--- /dev/null
+++ b/incr.c
@@ -0,0 +1,8 @@
+#include "types.h"
+#include "stat.h"
+#include "user.h"
+
+int main(int argc, char *argv[]){
+    printf(1, "%d\n", incr(atoi(argv[1])));
+    exit();
+}
\ No newline at end of file
diff --git a/shutdown.c b/shutdown.c
new file mode 100644
index 0000000..8c53a63
--- /dev/null
+++ b/shutdown.c
@@ -0,0 +1,9 @@
+#include "types.h"
+#include "stat.h"
+#include "user.h"
+
+int main(){
+    printf(1, "exiting\n");
+    shutdown();
+    exit();
+}
\ No newline at end of file
diff --git a/stat.h b/stat.h
index 8a80933..60f7940 100644
--- a/stat.h
+++ b/stat.h
@@ -9,3 +9,8 @@ struct stat {
   short nlink; // Number of links to file
   uint size;   // Size of file in bytes
 };
+
+struct mystat {
+  int *nums;
+  int sz;
+};
diff --git a/substr.c b/substr.c
new file mode 100644
index 0000000..49b5293
--- /dev/null
+++ b/substr.c
@@ -0,0 +1,13 @@
+#include "types.h"
+#include "stat.h"
+#include "user.h"
+
+int main(int argc, char *argv[]){
+    
+    char* str = argv[1];
+    int start_ind = atoi(argv[2]);
+    int len = atoi(argv[3]);
+   
+    printf(1, "%s\n", substr(str, start_ind, len));
+    exit();
+}
\ No newline at end of file
diff --git a/substroccur.c b/substroccur.c
new file mode 100644
index 0000000..ef1ed29
--- /dev/null
+++ b/substroccur.c
@@ -0,0 +1,12 @@
+#include "types.h"
+#include "stat.h"
+#include "user.h"
+
+int main(int argc, char *argv[]){
+    
+    char* str1 = argv[1];
+    char* str2 = argv[2];
+   
+    printf(1, "%d\n", substroccur(str1,str2));
+    exit();
+}
\ No newline at end of file
diff --git a/syscall.c b/syscall.c
index ee85261..54994bf 100644
--- a/syscall.c
+++ b/syscall.c
@@ -103,6 +103,13 @@ extern int sys_unlink(void);
 extern int sys_wait(void);
 extern int sys_write(void);
 extern int sys_uptime(void);
+extern int sys_shutdown(void);
+extern int sys_add(void);
+extern int sys_incr(void);
+extern int sys_substr(void);
+extern int sys_substroccur(void);
+extern int sys_nahian(void);
+extern int sys_salsabil(void);
 
 static int (*syscalls[])(void) = {
 [SYS_fork]    sys_fork,
@@ -126,6 +133,13 @@ static int (*syscalls[])(void) = {
 [SYS_link]    sys_link,
 [SYS_mkdir]   sys_mkdir,
 [SYS_close]   sys_close,
+[SYS_shutdown] sys_shutdown,
+[SYS_add] sys_add,
+[SYS_incr] sys_incr,
+[SYS_substr] sys_substr,
+[SYS_substroccur] sys_substroccur,
+[SYS_nahian] sys_nahian,
+[SYS_salsabil] sys_salsabil,
 };
 
 void
diff --git a/syscall.h b/syscall.h
index bc5f356..e14d186 100644
--- a/syscall.h
+++ b/syscall.h
@@ -20,3 +20,10 @@
 #define SYS_link   19
 #define SYS_mkdir  20
 #define SYS_close  21
+#define SYS_shutdown 22
+#define SYS_add 23
+#define SYS_incr 24
+#define SYS_substr 25
+#define SYS_substroccur 26
+#define SYS_nahian 27
+#define SYS_salsabil 28
diff --git a/sysproc.c b/sysproc.c
index 0686d29..b348d11 100644
--- a/sysproc.c
+++ b/sysproc.c
@@ -6,6 +6,7 @@
 #include "memlayout.h"
 #include "mmu.h"
 #include "proc.h"
+#include "stat.h"
 
 int
 sys_fork(void)
@@ -89,3 +90,97 @@ sys_uptime(void)
   release(&tickslock);
   return xticks;
 }
+
+void
+sys_shutdown(void)
+{
+  outw(0xB004, 0x0|0x2000);
+  outw(0x604, 0x0|0x2000);
+}
+
+int
+sys_add(void)
+{
+  //struct mystat *ct;
+  int *nums, size;
+  argptr (0 , (void*)&nums ,sizeof(*nums));
+  argint(1, &size);
+  int s = 0;
+  // for(int i = 0; i < ct->sz; i++){
+  //   s += ct->nums[i];
+  // }
+  for(int i = 0; i < size; i++){
+    s += nums[i];
+  }
+  return s;
+}
+
+int
+sys_incr(void)
+{
+  int num;
+  argint(0,&num);
+  return num+1;
+}
+
+char*
+sys_substr(void)
+{
+  char* str;
+  int start_ind, len;
+  argptr(0, (void*)&str, sizeof(*str));
+  argint(1, &start_ind);
+  argint(2, &len);
+  char *s = &str[start_ind];
+  s[len] = '\0';
+  return s;
+}
+
+int
+sys_substroccur(void)
+{
+  char* str1, * str2;
+  
+  argptr(0, (void*)&str1, sizeof(*str1));
+  argptr(1, (void*)&str2, sizeof(*str2));
+  int N = strlen(str1);
+  int M = strlen(str2);
+  int count = 0;
+  
+   for (int i = 0; i <= N - M; i++)
+  {
+      int j;
+      for (j = 0; j < M; j++){
+        if (str1[i+j] != str2[j]){
+          break;
+        }
+      }
+          
+      if (j == M) 
+      {
+        count++;
+      }
+  }
+  return count;
+}
+
+int
+sys_nahian(void)
+{
+  int student_id = 1705091;
+  return student_id;
+}
+
+int
+sys_salsabil(void)
+{
+  int a = 5, c = 11, student_id;
+  argint(0, &student_id);
+  int x = student_id;
+  int m = student_id;
+  
+  for(int i = 0; i < 500; i++){
+    x = ((a*x) + c) % m;
+  }
+  return x;
+}
\ No newline at end of file
diff --git a/testb2.c b/testb2.c
new file mode 100644
index 0000000..bd02ce9
--- /dev/null
+++ b/testb2.c
@@ -0,0 +1,25 @@
+#include "types.h"
+#include "stat.h"
+#include "user.h"
+
+int main(int argc, char *argv[]){
+    
+    int student_id = nahian();
+    int size = 7;
+    int dummy_stdid = student_id;
+    int *nums = malloc(size* sizeof(int));
+    for(int i = 0; i < 7; i++){
+       nums[i] = student_id%10;
+       student_id = student_id/10;
+    }
+    int sum = add(nums, size);
+    int random_number = salsabil(dummy_stdid);
+    int remainder = sum % random_number;
+   
+    printf(1, "student id: %d\n", dummy_stdid);
+    printf(1, "sum: %d\n", sum);
+    printf(1, "random number: %d\n", random_number);
+    printf(1, "remainder: %d\n", remainder);
+    
+    exit();
+}
\ No newline at end of file
diff --git a/ulib.c b/ulib.c
index 8e1e1a2..18b3106 100644
--- a/ulib.c
+++ b/ulib.c
@@ -84,12 +84,23 @@ stat(const char *n, struct stat *st)
 int
 atoi(const char *s)
 {
-  int n;
+  int i;
+  int sign = 1;
+  int number = 0;
+  int value = 0;
 
-  n = 0;
-  while('0' <= *s && *s <= '9')
-    n = n*10 + *s++ - '0';
-  return n;
+  if(s[0] == '-'){
+    sign = -1;
+    s++;
+  }
+
+  i = 0;
+  while(s[i] >= '0' && s[i] <= '9' && s[i] != '\0'){
+    number = (int) (s[i] - '0');
+    value = (value*10) + number;
+    i++;
+  }
+  return (value*sign);
 }
 
 void*
diff --git a/user.h b/user.h
index 4f99c52..9809933 100644
--- a/user.h
+++ b/user.h
@@ -1,5 +1,6 @@
 struct stat;
 struct rtcdate;
+struct mystat;
 
 // system calls
 int fork(void);
@@ -23,6 +24,13 @@ int getpid(void);
 char* sbrk(int);
 int sleep(int);
 int uptime(void);
+void shutdown(void);
+int add(int *, int);
+int incr(int);
+char* substr(char*, int, int);
+char* substroccur(char*, char*);
+int nahian();
+int salsabil(int);
 
 // ulib.c
 int stat(const char*, struct stat*);
diff --git a/usys.S b/usys.S
index 8bfd8a1..3f770f3 100644
--- a/usys.S
+++ b/usys.S
@@ -29,3 +29,10 @@ SYSCALL(getpid)
 SYSCALL(sbrk)
 SYSCALL(sleep)
 SYSCALL(uptime)
+SYSCALL(shutdown)
+SYSCALL(add)
+SYSCALL(incr)
+SYSCALL(substr)
+SYSCALL(substroccur)
+SYSCALL(nahian)
+SYSCALL(salsabil)
