diff --git a/Makefile b/Makefile
index 09d790c..8569706 100644
--- a/Makefile
+++ b/Makefile
@@ -27,6 +27,7 @@ OBJS = \
 	uart.o\
 	vectors.o\
 	vm.o\
+	rand.o\
 
 # Cross-compiling (e.g., on Mac OS X)
 # TOOLPREFIX = i386-jos-elf
@@ -181,6 +182,9 @@ UPROGS=\
 	_usertests\
 	_wc\
 	_zombie\
+	_ps\
+	_fetch\
+	_forkticket\
 
 fs.img: mkfs README $(UPROGS)
 	./mkfs fs.img README $(UPROGS)
@@ -217,7 +221,7 @@ QEMUGDB = $(shell if $(QEMU) -help | grep -q '^-gdb'; \
 	then echo "-gdb tcp::$(GDBPORT)"; \
 	else echo "-s -p $(GDBPORT)"; fi)
 ifndef CPUS
-CPUS := 2
+CPUS := 1
 endif
 QEMUOPTS = -drive file=fs.img,index=1,media=disk,format=raw -drive file=xv6.img,index=0,media=disk,format=raw -smp $(CPUS) -m 512 $(QEMUEXTRA)
 
@@ -248,7 +252,7 @@ qemu-nox-gdb: fs.img xv6.img .gdbinit
 # check in that version.
 
 EXTRA=\
-	mkfs.c ulib.c user.h cat.c echo.c forktest.c grep.c kill.c\
+	mkfs.c ulib.c user.h cat.c echo.c forktest.c grep.c kill.c ps.c fetch.c forkticket.c\
 	ln.c ls.c mkdir.c rm.c stressfs.c usertests.c wc.c zombie.c\
 	printf.c umalloc.c\
 	README dot-bochsrc *.pl toc.* runoff runoff1 runoff.list\
diff --git a/defs.h b/defs.h
index 82fb982..e8bfdfd 100644
--- a/defs.h
+++ b/defs.h
@@ -9,6 +9,7 @@ struct spinlock;
 struct sleeplock;
 struct stat;
 struct superblock;
+struct pstat;
 
 // bio.c
 void            binit(void);
@@ -120,6 +121,8 @@ void            userinit(void);
 int             wait(void);
 void            wakeup(void*);
 void            yield(void);
+int             settickets(int);
+int             getpinfo(struct pstat*);
 
 // swtch.S
 void            swtch(struct context**, struct context*);
diff --git a/fetch.c b/fetch.c
new file mode 100644
index 0000000..15886c2
--- /dev/null
+++ b/fetch.c
@@ -0,0 +1,136 @@
+#include "types.h"
+#include "user.h"
+#include "param.h"
+#include "pstat.h"
+
+#undef USE_YIELD
+#define MAX_CHILDREN 32
+#define LARGE_TICKET_COUNT 100000
+#define MAX_YIELDS_FOR_SETUP 100
+
+__attribute__((noreturn))
+void yield_forever() {
+    while (1) {
+        yield();
+    }
+}
+
+__attribute__((noreturn))
+void run_forever() {
+    while (1) {
+        __asm__("");
+    }
+}
+
+int spawn(int tickets) {
+    int pid = fork();
+    if (pid == 0) {
+        settickets(tickets);
+        yield();
+#ifdef USE_YIELD
+        yield_forever();
+#else
+        run_forever();
+#endif
+    } else if (pid != -1) {
+        return pid;
+    } else {
+        printf(2, "error in fork\n");
+        return -1;
+    }
+}
+
+int find_index_of_pid(int *list, int list_size, int pid) {
+    for (int i = 0; i < list_size; ++i) {
+        if (list[i] == pid)
+            return i;
+    }
+    return -1;
+}
+
+int get_num_process(int *inuse){
+    int num_processes = 0;
+    for(int i=0; i<NPROC; ++i){
+        num_processes += inuse[i];
+    }
+    return num_processes;
+}
+
+void wait_for_ticket_counts(int num_children, int *pids, int *tickets) {
+    for (int yield_count = 0; yield_count < MAX_YIELDS_FOR_SETUP; ++yield_count) {
+        yield();
+        int done = 1;
+        struct pstat info;
+        getpinfo(&info);
+        for (int i = 0; i < num_children; ++i) {
+            int index = find_index_of_pid(info.pid, get_num_process(info.inuse), pids[i]);
+            if (info.tickets[index] != tickets[i]) done = 0;
+        }
+        if (done)
+            break;
+    }
+}
+
+int main(int argc, char *argv[])
+{
+    if (argc < 3) {
+        printf(2, "usage: %s seconds tickets1 tickets2 ... ticketsN\n"
+                  "       seconds is the number of time units to run for\n"
+                  "       ticketsX is the number of tickets to give to subprocess N\n",
+                  argv[0]);
+        exit();
+    }
+    int tickets_for[MAX_CHILDREN];
+    int active_pids[MAX_CHILDREN];
+    int num_seconds = atoi(argv[1]);
+    int num_children = argc - 2;
+    if (num_children > MAX_CHILDREN) {
+        printf(2, "only up to %d supported\n", MAX_CHILDREN);
+        exit();
+    }
+    /* give us a lot of ticket so we don't get starved */
+    settickets(LARGE_TICKET_COUNT);
+    for (int i = 0; i < num_children; ++i) {
+        int tickets = atoi(argv[i + 2]);
+        tickets_for[i] = tickets;
+        active_pids[i] = spawn(tickets);
+    }
+    wait_for_ticket_counts(num_children, active_pids, tickets_for);
+    struct pstat before, after;
+    getpinfo(&before);
+    int before_num_processes = get_num_process(before.inuse);
+    sleep(num_seconds);
+    getpinfo(&after);
+    int after_num_processes = get_num_process(after.inuse);
+    for (int i = 0; i < num_children; ++i) {
+        kill(active_pids[i]);
+    }
+    for (int i = 0; i < num_children; ++i) {
+        wait();
+    }
+    if (before_num_processes >= NPROC || after_num_processes >= NPROC) {
+        printf(2, "getpinfo's num_processes is greater than NPROC before parent slept\n");
+        return 1;
+    }
+    printf(1, "TICKETS\tTICKS\n");
+    for (int i = 0; i < num_children; ++i) {
+        int before_index = find_index_of_pid(before.pid, before_num_processes, active_pids[i]);
+        int after_index = find_index_of_pid(after.pid, after_num_processes, active_pids[i]);
+        if (before_index == -1)
+            printf(2, "child %d did not exist for getpinfo before parent slept\n", i);
+        if (after_index == -1)
+            printf(2, "child %d did not exist for getpinfo after parent slept\n", i);
+        if (before_index == -1 || after_index == -1) {
+            printf(1, "%d\t--unknown--\n", tickets_for[i]);
+        } else {
+            // if (before.tickets[before_index] != tickets_for[i]) {
+            //     printf(2, "child %d had wrong number of tickets in getpinfo before parent slept\n", i);
+            // }
+            // if (after.tickets[after_index] != tickets_for[i]) {
+            //     printf(2, "child %d had wrong number of tickets in getpinfo after parent slept\n", i);
+            // }
+            printf(1, "%d\t%d\n", tickets_for[i], after.ticks[after_index] - before.ticks[before_index]);
+        }
+    }
+    exit();
+}
\ No newline at end of file
diff --git a/forkticket.c b/forkticket.c
new file mode 100644
index 0000000..959faf6
--- /dev/null
+++ b/forkticket.c
@@ -0,0 +1,67 @@
+#include "types.h"
+#include "stat.h"
+#include "user.h"
+#include "pstat.h"
+
+int main(int argc, char *argv[]){
+
+    printf(1, "Initial:\n");
+
+    struct pstat *ps1 = malloc (sizeof(struct pstat));
+    if(getpinfo(ps1) == 0){
+        printf(1, "pid\ttickets\t\tticks\n");
+        for(int i = 0; i < NPROC; i++){
+            if(ps1->inuse[i] == 1){
+                printf(1, "%d\t%d\t\t%d\n", ps1->pid[i], ps1->tickets[i], ps1->ticks[i]);
+            }
+        }
+    }
+    int ticket = 20;
+    settickets(ticket);
+
+    printf(1, "Parent ticket set to %d\n", ticket);
+    struct pstat *ps2 = malloc (sizeof(struct pstat));
+    if(getpinfo(ps2) == 0){
+        printf(1, "pid\ttickets\t\tticks\n");
+        for(int i = 0; i < NPROC; i++){
+            if(ps2->inuse[i] == 1){
+                printf(1, "%d\t%d\t\t%d\n", ps2->pid[i], ps2->tickets[i], ps2->ticks[i]);
+            }
+        }
+    }
+
+    int pid = 0;
+    sleep(100);
+    pid = fork();
+
+    if(pid >0){
+        wait();
+        exit();
+    }
+
+    printf(1, "Forked a child with same %d ticket as parent\n", ticket);
+    struct pstat *ps3 = malloc (sizeof(struct pstat));
+    if(getpinfo(ps3) == 0){
+        printf(1, "pid\ttickets\t\tticks\n");
+        for(int i = 0; i < NPROC; i++){
+            if(ps3->inuse[i] == 1){
+                printf(1, "%d\t%d\t\t%d\n", ps3->pid[i], ps3->tickets[i], ps3->ticks[i]);
+            }
+        }
+    }
+
+    ticket = 40;
+    settickets(ticket);
+
+    printf(1, "Child ticket set to %d\n", ticket);
+    struct pstat *ps4 = malloc (sizeof(struct pstat));
+    if(getpinfo(ps4) == 0){
+        printf(1, "pid\ttickets\t\tticks\n");
+        for(int i = 0; i < NPROC; i++){
+            if(ps4->inuse[i] == 1){
+                printf(1, "%d\t%d\t\t%d\n", ps4->pid[i], ps4->tickets[i], ps4->ticks[i]);
+            }
+        }
+    }
+    exit();
+}
\ No newline at end of file
diff --git a/proc.c b/proc.c
index 806b1b1..d156d3c 100644
--- a/proc.c
+++ b/proc.c
@@ -6,6 +6,8 @@
 #include "x86.h"
 #include "proc.h"
 #include "spinlock.h"
+#include "pstat.h"
+#include "rand.h"
 
 struct {
   struct spinlock lock;
@@ -14,6 +16,7 @@ struct {
 
 static struct proc *initproc;
 
+int lottery_ticket;
 int nextpid = 1;
 extern void forkret(void);
 extern void trapret(void);
@@ -88,6 +91,8 @@ allocproc(void)
 found:
   p->state = EMBRYO;
   p->pid = nextpid++;
+  p->tickets = 1;       // default ticket number
+  p->tick = 0;
 
   release(&ptable.lock);
 
@@ -199,6 +204,8 @@ fork(void)
   np->sz = curproc->sz;
   np->parent = curproc;
   *np->tf = *curproc->tf;
+  np->tickets = np->parent->tickets;      // assign parent ticket to child ticket
+  np->tick = 0;
 
   // Clear %eax so that fork returns 0 in the child.
   np->tf->eax = 0;
@@ -330,11 +337,38 @@ scheduler(void)
     // Enable interrupts on this processor.
     sti();
 
-    // Loop over process table looking for process to run.
+    //lottery scheduling
+
+    //total ticket
     acquire(&ptable.lock);
+    lottery_ticket = 0;
+
     for(p = ptable.proc; p < &ptable.proc[NPROC]; p++){
       if(p->state != RUNNABLE)
         continue;
+      lottery_ticket += p->tickets;
+      
+    }
+
+    int winner = 0;
+    acquire(&tickslock);
+
+    if(lottery_ticket != 0){
+      winner = random(ticks, lottery_ticket);
+    }
+    release(&tickslock);
+
+    // Loop over process table looking for process to run.
+    int process_ticket = 0;
+
+    for(p = ptable.proc; p < &ptable.proc[NPROC]; p++){
+      if(p->state != RUNNABLE)
+        continue;
+
+      // lottery scheduling
+      process_ticket += p->tickets;
+      if(process_ticket < winner)
+        continue;
 
       // Switch to chosen process.  It is the process's job
       // to release ptable.lock and then reacquire it
@@ -345,10 +379,12 @@ scheduler(void)
 
       swtch(&(c->scheduler), p->context);
       switchkvm();
+      p->tick += 1;
 
       // Process is done running for now.
       // It should have changed its p->state before coming back.
       c->proc = 0;
+      break;
     }
     release(&ptable.lock);
 
@@ -532,3 +568,52 @@ procdump(void)
     cprintf("\n");
   }
 }
+
+int
+settickets(int ticket)
+{
+  struct proc *p;
+  struct proc *this_p = myproc();
+
+  acquire(&ptable.lock);
+
+  for(p = ptable.proc; p < &ptable.proc[NPROC]; p++){
+    if(p->pid == this_p->pid){
+      if(ticket > 0){
+        p->tickets = ticket;
+        release(&ptable.lock);
+        return 0;
+      }
+      release(&ptable.lock);
+      return -1;
+    }
+  }
+  release(&ptable.lock);
+  return -1;
+}
+
+int
+getpinfo(struct pstat * ps)
+{
+  struct proc *p;
+  acquire(&ptable.lock);
+
+  int i = 0;
+  if(ps){
+    for(p = ptable.proc; p < &ptable.proc[NPROC]; p++){
+      ps->tickets[i] = p->tickets;
+      ps->pid[i] = p->pid;
+      if(p->state != UNUSED){
+        ps->inuse[i] = 1;
+      }
+      else
+        ps->inuse[i] = 0;
+      ps->ticks[i] = p->tick;
+
+      i++;
+    }
+    release(&ptable.lock);
+    return 0;
+  }
+  return -1;
+}
\ No newline at end of file
diff --git a/proc.h b/proc.h
index 1647114..360ba6e 100644
--- a/proc.h
+++ b/proc.h
@@ -49,6 +49,11 @@ struct proc {
   struct file *ofile[NOFILE];  // Open files
   struct inode *cwd;           // Current directory
   char name[16];               // Process name (debugging)
+
+
+  // my modificatioon
+  int tickets;                 // number of ticket the process has
+  int tick;                   // total ticks this process has got
 };
 
 // Process memory is laid out contiguously, low addresses first:
diff --git a/ps.c b/ps.c
new file mode 100644
index 0000000..5774e1b
--- /dev/null
+++ b/ps.c
@@ -0,0 +1,18 @@
+#include "types.h"
+#include "stat.h"
+#include "user.h"
+#include "pstat.h"
+
+int main(int argc, char *argv[]){
+
+    struct pstat *ps = malloc (sizeof(struct pstat));
+    if(getpinfo(ps) == 0){
+        printf(1, "\npid\ttickets\tticks\n");
+        for(int i = 0; i < NPROC; i++){
+            if(ps->inuse[i] == 1){
+                printf(1, "%d\t%d\t%d\n", ps->pid[i], ps->tickets[i], ps->ticks[i]);
+            }
+        }
+    }
+    exit();
+}
\ No newline at end of file
diff --git a/pstat.h b/pstat.h
new file mode 100644
index 0000000..dd7a9e0
--- /dev/null
+++ b/pstat.h
@@ -0,0 +1,10 @@
+#ifndef _PSTAT_H_
+#define _PSTAT_H_
+#include "param.h"
+struct pstat {
+int inuse[NPROC]; // whether this slot of the process table is in use (1 or 0)
+int tickets[NPROC]; // the number of tickets this process has
+int pid[NPROC]; // the PID of each process
+int ticks[NPROC]; // the number of ticks each process has accumulated
+};
+#endif // _PSTAT_H_
\ No newline at end of file
diff --git a/rand.c b/rand.c
new file mode 100644
index 0000000..36d6cb8
--- /dev/null
+++ b/rand.c
@@ -0,0 +1,12 @@
+int
+random(int ticks, int lottery_ticket)
+{
+  int a = 5, c = 11;
+  int x = ticks;
+  int m = ticks;
+  
+  for(int i = 0; i < 500; i++){
+    x = ((a*x) + c) % m;
+  }
+  return (x % lottery_ticket) +1;
+}
\ No newline at end of file
diff --git a/rand.h b/rand.h
new file mode 100644
index 0000000..7ef14ae
--- /dev/null
+++ b/rand.h
@@ -0,0 +1 @@
+int random(int, int);
\ No newline at end of file
diff --git a/syscall.c b/syscall.c
index ee85261..fb59e0a 100644
--- a/syscall.c
+++ b/syscall.c
@@ -103,6 +103,9 @@ extern int sys_unlink(void);
 extern int sys_wait(void);
 extern int sys_write(void);
 extern int sys_uptime(void);
+extern int sys_settickets(void);
+extern int sys_getpinfo(void);
+extern int sys_yield(void);
 
 static int (*syscalls[])(void) = {
 [SYS_fork]    sys_fork,
@@ -126,6 +129,9 @@ static int (*syscalls[])(void) = {
 [SYS_link]    sys_link,
 [SYS_mkdir]   sys_mkdir,
 [SYS_close]   sys_close,
+[SYS_settickets] sys_settickets,
+[SYS_getpinfo] sys_getpinfo,
+[SYS_yield] sys_yield,
 };
 
 void
diff --git a/syscall.h b/syscall.h
index bc5f356..b89c54f 100644
--- a/syscall.h
+++ b/syscall.h
@@ -20,3 +20,6 @@
 #define SYS_link   19
 #define SYS_mkdir  20
 #define SYS_close  21
+#define SYS_settickets 22
+#define SYS_getpinfo 23
+#define SYS_yield 24
diff --git a/sysproc.c b/sysproc.c
index 0686d29..598aa5a 100644
--- a/sysproc.c
+++ b/sysproc.c
@@ -6,6 +6,7 @@
 #include "memlayout.h"
 #include "mmu.h"
 #include "proc.h"
+#include "pstat.h"
 
 int
 sys_fork(void)
@@ -89,3 +90,33 @@ sys_uptime(void)
   release(&tickslock);
   return xticks;
 }
+
+int
+sys_settickets(void)
+{
+  int ticket;
+  argint(0, &ticket);
+  
+  if(settickets(ticket) == 0){
+    return 0;
+  }
+  else return -1;
+}
+
+int
+sys_getpinfo(void)
+{
+  struct pstat *ps;
+  
+  argptr(0, (void*)&ps, sizeof(*ps));
+
+  if(getpinfo(ps) == 0)
+    return 0;
+  return -1;
+}
+
+void
+sys_yield(void)
+{
+  yield();
+}
diff --git a/user.h b/user.h
index 4f99c52..4575c0c 100644
--- a/user.h
+++ b/user.h
@@ -1,5 +1,6 @@
 struct stat;
 struct rtcdate;
+struct pstat;
 
 // system calls
 int fork(void);
@@ -23,6 +24,9 @@ int getpid(void);
 char* sbrk(int);
 int sleep(int);
 int uptime(void);
+int settickets(int);
+int getpinfo(struct pstat*);
+int yield(void);
 
 // ulib.c
 int stat(const char*, struct stat*);
diff --git a/usys.S b/usys.S
index 8bfd8a1..cf07e01 100644
--- a/usys.S
+++ b/usys.S
@@ -29,3 +29,6 @@ SYSCALL(getpid)
 SYSCALL(sbrk)
 SYSCALL(sleep)
 SYSCALL(uptime)
+SYSCALL(settickets)
+SYSCALL(getpinfo)
+SYSCALL(yield)
